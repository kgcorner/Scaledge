package com.kgcorner.scaledge.util;

import org.springframework.security.crypto.bcrypt.BCrypt;

import java.math.BigInteger;
import java.security.SecureRandom;

public class Strings {

    private Strings(){}
    /**
     * Checks whether string is empty or null
     * @param string String to check
     * @return false if null or empty and true otherwise
     */
    public static boolean isNullOrEmpty(String string) {
        return string == null || string.trim().length() == 0;
    }

    /**
     * Generates a random string of given length
     * @param length
     * @return
     */
    public static String generateRandomString(int length) {
        return new BigInteger(130, new SecureRandom()).toString(length);
    }

    /**
     * Generates hash for given plain string using {@link BCrypt}
     * @param payload string to hash
     * @return hashed string
     */
    public static String getHash(String payload) {
        return BCrypt.hashpw(payload, BCrypt.gensalt());
    }

    /**
     * Check whether given hash is equal to hash of given payload
     * Hash should be generated by {@link Strings#getHash(String)}
     * @param payload plain text to test hash of
     * @param hash hash which needs to be checked
     * @return TRUE if hash is equal to hash of payload false otherwise
     */
    public static boolean isHashMatching(String payload, String hash) {
        return BCrypt.checkpw(payload, hash);
    }
}
